val rdd = sc.textFile("movie/imdb_labelled.txt").map(x => x.split("\\t"))

-- remove nonword characters (such as punctuation).
val nonWordSplit = rdd.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))
nonWordSplit.sample(true, 0.3, 42).take(100).mkString(",")
nonWordSplit.distinct.count

-- filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)
filterNumbers.distinct.sample(false, 0.3, 42).take(100).mkString("\n")
filterNumbers.distinct.count

-- list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)
tokenCounts.top(20)(orderingDesc).mkString("\n")

-- remove stop words
val stopwords = Set(
 "the","a","an","of","or","in","for","by","on","but", "is", "not", "with", "as", "was", "if",
 "they", "are", "this", "and", "it", "have", "from", "at", "my", "be", "that", "to"
)
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }
tokenCountsFilteredStopwords.top(20)(orderingDesc).mkString("\n")

-- remove tokens with one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }
tokenCountsFilteredSize.top(20)(orderingDesc).mkString("\n")

-- list least occurring terms in the corpus
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)
tokenCountsFilteredSize.top(20)(orderingAsc).mkString("\n")

-- remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }
tokenCountsFilteredAll.top(20)(orderingAsc).mkString("\n")

tokenCountsFilteredAll.count
res24: Long = 1161

def tokenize(line: String): Seq[String] = {
 line.split("""\W+""")
 .map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filterNot(token => stopwords.contains(token))
 .filterNot(token => rareTokens.contains(token))
 .filter(token => token.size >= 2)
 .toSeq
}

rdd.flatMap(x => tokenize(x(0))).distinct.count
res27: Long = 1161

val tokens = rdd.map(x => tokenize(x(0)))

---------------------------

import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 11).toInt
val hashingTF = new HashingTF(dim)

-- transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val tf = hashingTF.transform(tokens)
tf.cache

-- compute the inverse document frequency for each term in the corpus
-- by creating a new IDF instance and calling fit with our RDD of term frequency
-- vectors as the input. We will then transform our term frequency vectors to TF-IDF
-- vectors through the transform function of IDF:

val idf = new IDF().fit(tf)
val tfidf = idf.transform(tf)

---------------------

-- Intuitively, we might expect two documents to be more similar to each other if they
-- share many terms. Conversely, we might expect two documents to be less similar
-- if they each contain many terms that are different from each other. As we compute
-- cosine similarity by computing a dot product of the two vectors and each vector
-- is made up of the terms in each document, we can see that documents with a high
-- overlap of terms will tend to have a higher cosine similarity.

val keywords = sc.parallelize(Seq(Seq("audience","characters","science")))
val tfkeywords = hashingTF.transform(keywords)
val tfidfkeywords = idf.transform(tfkeywords)
val keywordVector = tfidfkeywords.first.asInstanceOf[SV]

import breeze.linalg._
val keywordSV = new SparseVector(keywordVector.indices, keywordVector.values, keywordVector.size)

val cosineSim = rdd.map( x => {
   val tfaux = hashingTF.transform(tokenize(x(0)))
   val tfidfaux = idf.transform(tfaux)
   val auxVector = tfidfaux.asInstanceOf[SV]
   val auxSV = new SparseVector(auxVector.indices, auxVector.values, auxVector.size)
   val cosineSim = auxSV.dot(keywordSV) / ( norm(auxSV)*norm(keywordSV) )
   (x(0),cosineSim)
 })


val orderingDescDocs = Ordering.by[(String, Double), Double](_._2)

cosineSim.top(20)(orderingDescDocs).mkString("\n")
res6: String =
(It's this pandering to the audience that sabotages most of his films.  ,0.41500939539147585)
(Anne Heche was utterly convincing.  ,0.38393341547218474)
(What this film lacks is a convincing script.  ,0.37846215662630767)
(The entire audience applauded at the conclusion of the film.  ,0.3520167510910978)
(Not sure who was more lost - the flat characters or the audience, nearly half of whom walked out.  ,0.297966455956392)
(Both actors truly understand and become their particular character, delivering a convincing, sincere performance.  ,0.22959119908727826)
(It's as continuously beautiful to look at as a Bertolucci, but the relationships here are more convincing and the narrative more engaging than some of that master's work.  ,0.21329365112295245)
(All the characters in ...